// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: chart.proto

package chart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChartClient is the client API for Chart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChartClient interface {
	Series(ctx context.Context, in *SeriesRequest, opts ...grpc.CallOption) (*SeriesReply, error)
}

type chartClient struct {
	cc grpc.ClientConnInterface
}

func NewChartClient(cc grpc.ClientConnInterface) ChartClient {
	return &chartClient{cc}
}

func (c *chartClient) Series(ctx context.Context, in *SeriesRequest, opts ...grpc.CallOption) (*SeriesReply, error) {
	out := new(SeriesReply)
	err := c.cc.Invoke(ctx, "/taoniu.local.cryptos.grpc.binance.spot.analysis.tradings.fishers.chart.Chart/Series", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartServer is the server API for Chart service.
// All implementations must embed UnimplementedChartServer
// for forward compatibility
type ChartServer interface {
	Series(context.Context, *SeriesRequest) (*SeriesReply, error)
	mustEmbedUnimplementedChartServer()
}

// UnimplementedChartServer must be embedded to have forward compatible implementations.
type UnimplementedChartServer struct {
}

func (UnimplementedChartServer) Series(context.Context, *SeriesRequest) (*SeriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Series not implemented")
}
func (UnimplementedChartServer) mustEmbedUnimplementedChartServer() {}

// UnsafeChartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChartServer will
// result in compilation errors.
type UnsafeChartServer interface {
	mustEmbedUnimplementedChartServer()
}

func RegisterChartServer(s grpc.ServiceRegistrar, srv ChartServer) {
	s.RegisterService(&Chart_ServiceDesc, srv)
}

func _Chart_Series_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServer).Series(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taoniu.local.cryptos.grpc.binance.spot.analysis.tradings.fishers.chart.Chart/Series",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServer).Series(ctx, req.(*SeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chart_ServiceDesc is the grpc.ServiceDesc for Chart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taoniu.local.cryptos.grpc.binance.spot.analysis.tradings.fishers.chart.Chart",
	HandlerType: (*ChartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Series",
			Handler:    _Chart_Series_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chart.proto",
}
