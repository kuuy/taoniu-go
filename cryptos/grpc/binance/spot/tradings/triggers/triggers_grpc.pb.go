// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: binance/spot/tradings/triggers/triggers.proto

package triggers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TriggersClient is the client API for Triggers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggersClient interface {
	Pagenate(ctx context.Context, in *PagenateRequest, opts ...grpc.CallOption) (*PagenateReply, error)
}

type triggersClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggersClient(cc grpc.ClientConnInterface) TriggersClient {
	return &triggersClient{cc}
}

func (c *triggersClient) Pagenate(ctx context.Context, in *PagenateRequest, opts ...grpc.CallOption) (*PagenateReply, error) {
	out := new(PagenateReply)
	err := c.cc.Invoke(ctx, "/taoniu.local.cryptos.grpc.binance.spot.tradings.triggers.Triggers/Pagenate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggersServer is the server API for Triggers service.
// All implementations must embed UnimplementedTriggersServer
// for forward compatibility
type TriggersServer interface {
	Pagenate(context.Context, *PagenateRequest) (*PagenateReply, error)
	mustEmbedUnimplementedTriggersServer()
}

// UnimplementedTriggersServer must be embedded to have forward compatible implementations.
type UnimplementedTriggersServer struct {
}

func (UnimplementedTriggersServer) Pagenate(context.Context, *PagenateRequest) (*PagenateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pagenate not implemented")
}
func (UnimplementedTriggersServer) mustEmbedUnimplementedTriggersServer() {}

// UnsafeTriggersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggersServer will
// result in compilation errors.
type UnsafeTriggersServer interface {
	mustEmbedUnimplementedTriggersServer()
}

func RegisterTriggersServer(s grpc.ServiceRegistrar, srv TriggersServer) {
	s.RegisterService(&Triggers_ServiceDesc, srv)
}

func _Triggers_Pagenate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagenateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggersServer).Pagenate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taoniu.local.cryptos.grpc.binance.spot.tradings.triggers.Triggers/Pagenate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggersServer).Pagenate(ctx, req.(*PagenateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Triggers_ServiceDesc is the grpc.ServiceDesc for Triggers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Triggers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taoniu.local.cryptos.grpc.binance.spot.tradings.triggers.Triggers",
	HandlerType: (*TriggersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pagenate",
			Handler:    _Triggers_Pagenate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "binance/spot/tradings/triggers/triggers.proto",
}
